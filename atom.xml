<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oyashiro</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-23T06:25:46.386Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>oyashiro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>帅比</title>
    <link href="http://example.com/2021/06/23/bb/"/>
    <id>http://example.com/2021/06/23/bb/</id>
    <published>2021-06-23T06:25:06.347Z</published>
    <updated>2021-06-23T06:25:46.386Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>牛牛</title>
    <link href="http://example.com/2021/06/23/aa/"/>
    <id>http://example.com/2021/06/23/aa/</id>
    <published>2021-06-23T03:58:39.577Z</published>
    <updated>2021-06-23T03:59:16.910Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://example.com/2021/06/23/hello-world/"/>
    <id>http://example.com/2021/06/23/hello-world/</id>
    <published>2021-06-23T02:13:10.193Z</published>
    <updated>2021-06-23T07:19:45.737Z</updated>
    
    <content type="html"><![CDATA[<p>面试题汇总</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="JDK-常用的包"><a href="#JDK-常用的包" class="headerlink" title="JDK 常用的包"></a>JDK 常用的包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang： 这个是系统的基础类，比如 String、Math、Integer、System 和 Thread，提供常用功能。</span><br><span class="line">java.io: 这里面是所有输入输出有关的类，比如文件操作等</span><br><span class="line">java.net: 这里面是与网络有关的类，比如 URL,URLConnection 等。</span><br><span class="line">java.util : 这个是系统辅助类，特别是集合类 Collection,List,Map 等。</span><br><span class="line">java.sql: 这个是数据库操作的类，Connection, Statememt，ResultSet 等</span><br></pre></td></tr></table></figure><h3 id="Get-和-Post-的区别"><a href="#Get-和-Post-的区别" class="headerlink" title="Get 和 Post 的区别"></a>Get 和 Post 的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">get 是从服务器上获取数据，post 是向服务器传送数据</span><br><span class="line">get 传送的数据量较小,post 传送的数据量较大</span><br><span class="line">get 安全性非常低，post 安全性较高</span><br><span class="line">get 执行效率比post</span><br><span class="line">在进行文件上传时只能使用 post 而不能是 get</span><br></pre></td></tr></table></figure><h3 id="Java-多态的具体体现"><a href="#Java-多态的具体体现" class="headerlink" title="Java 多态的具体体现"></a>Java 多态的具体体现</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">面向对象编程有四个特征：抽象，封装，继承，多态</span><br><span class="line">多态有四种体现形式:</span><br><span class="line">接口和接口的继承</span><br><span class="line">类和类的继承</span><br><span class="line">重载</span><br><span class="line">重写</span><br></pre></td></tr></table></figure><h3 id="StringBuffer-StringBuilder-String-区别"><a href="#StringBuffer-StringBuilder-String-区别" class="headerlink" title="StringBuffer StringBuilder String 区别"></a>StringBuffer StringBuilder String 区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder 执行效率高于 StringBuffer 高于 String</span><br><span class="line">String 是一个常量，是不可变的,StringBuffer 和 StringBuilder 都是可变的</span><br><span class="line">String,StringBuffer是线程安全的,StringBuilder是非线程安全的</span><br></pre></td></tr></table></figure><h3 id="Hashtable-与-HashMap-的区别"><a href="#Hashtable-与-HashMap-的区别" class="headerlink" title="Hashtable 与 HashMap 的区别"></a>Hashtable 与 HashMap 的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap 不是线程安全的，HashTable 是线程安全</span><br><span class="line">HashMap 允许空（null）的键和值（key），HashTable 则不允许</span><br><span class="line">HashMap 性能优于 Hashtable</span><br></pre></td></tr></table></figure><h3 id="九大隐式对象"><a href="#九大隐式对象" class="headerlink" title="九大隐式对象"></a>九大隐式对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入/输出对象： request、response、out</span><br><span class="line">作用域通信对象： session、application、pageContext</span><br><span class="line">Servlet 对象： page、config</span><br><span class="line">错误对象： exception</span><br></pre></td></tr></table></figure><h3 id="Forword-请求转发-与-Redirect-重定向"><a href="#Forword-请求转发-与-Redirect-重定向" class="headerlink" title="Forword(请求转发)与 Redirect(重定向)"></a>Forword(请求转发)与 Redirect(重定向)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Forword 是一个请求的延续，可以共享 request 的数据</span><br><span class="line">Redirect 开启一个新的请求，不可以共享 request 的数据</span><br><span class="line">Forword 转发地址栏不发生变化</span><br><span class="line">Redirect 转发地址栏发生变化</span><br></pre></td></tr></table></figure><h3 id="JQurey-总结"><a href="#JQurey-总结" class="headerlink" title="JQurey 总结"></a>JQurey 总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jquery 是一个轻量级的 js 框架，具有跨浏览器的特性，兼容性好，并且封装了很多工具，方便使用。</span><br></pre></td></tr></table></figure><h3 id="XML-和-Json-的特点"><a href="#XML-和-Json-的特点" class="headerlink" title="XML 和 Json 的特点"></a>XML 和 Json 的特点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Xml 特点：</span><br><span class="line">有且只有一个根节点；</span><br><span class="line">数据传输的载体</span><br><span class="line">所有的标签都需要自定义</span><br><span class="line">是纯文本文件</span><br><span class="line"></span><br><span class="line">Json（JavaScript Object Notation）特点：</span><br><span class="line">json 对象(就是在&#123;&#125;中存储键值对，键和值之间用冒号分隔，键 值 对之间用逗号分隔)</span><br><span class="line">json 数组(就是[]中存储多个 json 对象，json 对象之间用逗号分隔)（两者间可以进行相互嵌套）数据传输的载体之一</span><br></pre></td></tr></table></figure><h3 id="Page-和-PageContext-的区别"><a href="#Page-和-PageContext-的区别" class="headerlink" title="Page 和 PageContext 的区别"></a>Page 和 PageContext 的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page 是 servlet 对象；使用 this 关键字，它的作用范围是在同一页面。PageContext 是作用域通信对象；通常使用setAttribute()和 getAttribute()来设置和获取存放对象的值。</span><br></pre></td></tr></table></figure><h3 id="JSP9-大隐视对象中四个作用域的大小与作用范围"><a href="#JSP9-大隐视对象中四个作用域的大小与作用范围" class="headerlink" title="JSP9 大隐视对象中四个作用域的大小与作用范围"></a>JSP9 大隐视对象中四个作用域的大小与作用范围</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四个作用域从大到小：appliaction &gt; session &gt; request &gt; page</span><br><span class="line">application:全局作用域</span><br><span class="line">session会话作用域</span><br><span class="line">request请求作用域</span><br><span class="line">page一个 JSP 页面</span><br></pre></td></tr></table></figure><h3 id="List-Set-Collection-Collections"><a href="#List-Set-Collection-Collections" class="headerlink" title="List,Set,Collection,Collections"></a>List,Set,Collection,Collections</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List是有序且不可重复的接口</span><br><span class="line">Set是无序且可重复的接口</span><br><span class="line">Collection 是集合的顶层接口</span><br><span class="line">Collections 是一个封装了众多关于集合操作的静态方法的工具类,因为构造方法是私有的，所以不能实例化</span><br></pre></td></tr></table></figure><h3 id="java-的基本数据类型"><a href="#java-的基本数据类型" class="headerlink" title="java 的基本数据类型"></a>java 的基本数据类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数据类型大小</span><br><span class="line">byte(字节)1(8 位)</span><br><span class="line">shot(短整型)2(16 位)</span><br><span class="line">int(整型)4(32 位)</span><br><span class="line">long(长整型)8(32 位)</span><br><span class="line"><span class="built_in">float</span>(浮点型)4(32 位)</span><br><span class="line">double(双精度)8(64 位)</span><br><span class="line">char(字符型)2(16 位)</span><br><span class="line">boolean(布尔型)1 位</span><br></pre></td></tr></table></figure><h3 id="UE-和-UI-的区别"><a href="#UE-和-UI-的区别" class="headerlink" title="UE 和 UI 的区别"></a>UE 和 UI 的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UE 是用户体验度</span><br><span class="line"></span><br><span class="line">UI 界面原型</span><br></pre></td></tr></table></figure><h3 id="osi-七层模型"><a href="#osi-七层模型" class="headerlink" title="osi 七层模型"></a>osi 七层模型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">第一层：物理层</span><br><span class="line"></span><br><span class="line">第二层：数据链路层</span><br><span class="line"></span><br><span class="line">第三层：网络层</span><br><span class="line"></span><br><span class="line">第四层：传输层</span><br><span class="line"></span><br><span class="line">第五层：会话层</span><br><span class="line"></span><br><span class="line">第六层：表示层</span><br><span class="line"></span><br><span class="line">第七层：应用层</span><br></pre></td></tr></table></figure><h3 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程(Thread)与进程（Process）进程定义的是应用程序与应用程序之间的边界，通常来说一个进程就代表一个与之对应的应用程序。不同的进程之间不能共享代码和数据空间，而同一进程的不同线程可以共享代码和数据空间。</span><br><span class="line">.一个进程可以包括若干个线程，同时创建多个线程来完成某项任务，便是多线程</span><br><span class="line">实现线程的两种方式：继承 Thread 类，实现 Runable 接口</span><br></pre></td></tr></table></figure><h3 id="jvm-的内存结构"><a href="#jvm-的内存结构" class="headerlink" title="jvm 的内存结构"></a>jvm 的内存结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分为堆(heap)和栈(stack),堆里面存放是对象实例也就是 new出来的对象。栈里面存放的是基本数据类型以及引用数据类型的地址</span><br></pre></td></tr></table></figure><h3 id="内存泄露和内存溢出"><a href="#内存泄露和内存溢出" class="headerlink" title="内存泄露和内存溢出"></a>内存泄露和内存溢出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">内存泄露 (memory leak)，是指应用程序在申请内存后，无法释放已经申请的内存空间</span><br><span class="line">内存溢出（out of memory）是指应用程序在申请内存时，没有足够的内存空间供其使用</span><br></pre></td></tr></table></figure><h3 id="项目的生命周期"><a href="#项目的生命周期" class="headerlink" title="项目的生命周期"></a>项目的生命周期</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.需求分析</span><br><span class="line"></span><br><span class="line">2.概要设计</span><br><span class="line"></span><br><span class="line">3.详细设计(用例图，流程图，类图)</span><br><span class="line"></span><br><span class="line">4.数据库设计(powerdesigner)</span><br><span class="line"></span><br><span class="line">5.代码开发（编写）</span><br><span class="line"></span><br><span class="line">6.单元测试（junit 白盒测试）(开发人员)</span><br><span class="line"></span><br><span class="line">svn 版本管理工具(提交，更新代码，文档)</span><br><span class="line"></span><br><span class="line">7.集成测试 （黑盒测试，loadrunner（编写测试脚本）(高级测试)）</span><br><span class="line"></span><br><span class="line">8.上线试运行 （用户自己体验）</span><br><span class="line"></span><br><span class="line">9.压力测试（loadrunner）</span><br><span class="line"></span><br><span class="line">10.正式上线</span><br><span class="line"></span><br><span class="line">11.维护</span><br></pre></td></tr></table></figure><h3 id="session-和-cookie-的区别"><a href="#session-和-cookie-的区别" class="headerlink" title="session 和 cookie 的区别"></a>session 和 cookie 的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.session 是存储在服务器端，cookie 是存储在客户端的，</span><br><span class="line">2. session 的安全性要比cookie 高</span><br><span class="line">3.获取 session 里的信息是通过存放在会话 cookie 里的 sessionid 获取的。</span><br><span class="line">4.session 里的东西不断增加会造成服务器的负担,关闭浏览器cookie也就关闭了</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;面试题汇总&lt;/p&gt;
&lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;h3 id=&quot;JDK-常用的包&quot;&gt;&lt;a href=&quot;#JDK-常用的包&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
